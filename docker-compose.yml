version: "3.8"
services:
  # Kafka Broker
  broker:
    image: confluentinc/cp-kafka:7.6.1
    hostname: broker
    container_name: broker
    networks:
      - spark-net
    ports:
      - "9092:9092"
      - "9101:9101"
      - "29092:29092"
    healthcheck:
      test: kafka-topics --bootstrap-server broker:9092 --list
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@broker:29093"
      KAFKA_LISTENERS: "PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_LOG_DIRS: "/tmp/kraft-combined-logs"
      CLUSTER_ID: "MkU3OEVBNTcwNTJENDM2Qk"

  # AKHQ - Kafka UI
  akhq:
    image: tchiotludo/akhq:0.25.0
    container_name: akhq
    networks:
      - spark-net
    ports:
      - "8080:8080"
    depends_on:
      - broker
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "broker:29092"

  # Kafka Topic Creator
  topic-creator:
    image: confluentinc/cp-kafka:7.6.1
    depends_on:
      broker:
        condition: service_healthy
    networks:
      - spark-net
    volumes:
      - ./kafka:/kafka
    command:
      - bash
      - -c
      - |
        awk '{system("kafka-topics --create --bootstrap-server broker:29092 --replication-factor 1 --partitions 1 --topic "$0" --if-not-exists")}' /kafka/bootstrap_topics.txt

  # Sensor Producer
  sensor-producer:
    build:
      context: .
      dockerfile: kafka/Dockerfile.producer
    container_name: sensor-producer
    networks:
      - spark-net
    depends_on:
      broker:
        condition: service_healthy
      topic-creator:
        condition: service_completed_successfully
    environment:
      - BOOTSTRAP_SERVERS=broker:29092
    command:
      - python
      - -u
      - /app/producer.py

  # MongoDB
  mongodb:
    image: mongo:6.0
    container_name: mongodb
    hostname: mongo # Added hostname
    ports:
      - "27017:27017"
    networks:
      - spark-net
    volumes:
      - ./mongo_data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Spark / PySpark Streaming Job
  pyspark:
    build:
      context: .
      dockerfile: spark/DockerFile.spark
    container_name: pyspark
    ports:
      - 8888:8888
      - 4040:4040
    depends_on:
      mongodb:
        condition: service_healthy
      broker:
        condition: service_healthy
    networks:
      - spark-net
    volumes:
      - ./src:/home/jovyan/work/src
      - ./tests:/home/jovyan/work/tests
      - ./checkpoints:/home/jovyan/work/checkpoints
    environment:
      - MONGO_URI=mongodb://mongodb:27017/spark_db # Add environment variable
    command: []

networks:
  spark-net:
    driver: bridge
